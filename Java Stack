>>Stack Implementation Using Arrays - 



public class Solve{	

    static final int max = 1000;
    int top;
    int[] arr = new int[max];
    
    Solve() {
    	top=-1;
    }
    
    boolean isEmpty() {
    	return (top<0);
    }
    
    void push(int data) {
    	if(top>=(max-1)) {
    		System.out.println("Stack Overflow!!!");
    		return;
    	}else {
    		arr[++top] = data;
    	}    	
    }
    
    int pop() {
    	if(isEmpty()) {
    		System.out.println("Stack Underflow!!!");
    		return -1;
    	}else {
    		int x = arr[top--];
    		return x;
    	}
    }
    
    int peek() {
    	if(isEmpty()) {
    		System.out.println("Stack Underflow!!!");
    		return -1;
    	}else {
    		int x = arr[top];
    		return x;
    	}
    }
	
	public static void main(String[] args) throws java.lang.Exception {
       
		Solve s = new Solve();
		s.push(10);
		s.push(20);
		s.push(30);
		System.out.println(s.top+" "+s.pop()+" "+s.top+" "+s.pop()+" "+s.top+" "+s.pop()+" "+s.top+" "+s.pop());		
       
	}	
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------


>>  Using Linked List 



public class Solve{	

    class nodeStack{
    	int data;
    	nodeStack next;
    	nodeStack(int d){
    		data = d;
    		this.next = null;
    	}
    }
	
    nodeStack root = null;
    
    boolean isEmpty() {
    	return (root == null);
    }
    
    void push(int data) {
    	nodeStack newNode = new nodeStack(data);
    	
    	if(root == null) {
    		root = newNode;
    	}else {
    		nodeStack tmp = root;
    		root = newNode;
    		newNode.next = tmp;
    	}
    }
    
    int pop() {
    	if(root == null) {
    		System.out.println("Stack UnderFlow");
    		return -1;
    	}else {
    		int x = root.data;
    		root = root.next;
    		return x;
    	}
    }
    
    int peek() {
    	if(root == null) {
    		System.out.println("Stack UnderFlow");
    		return -1;
    	}else {
    		int x = root.data;
    		return x;
    	}
    }
    
    public static void main(String[] args) {
    	Solve s = new Solve();
    	
    	s.push(10);
    	s.push(20);
    	s.push(30);
    	
    	System.out.println(s.root+" "+s.pop()+" "+s.root+" "+s.pop()+" "+s.root+" "+s.pop()+" "+s.root+" "+s.pop());		
    }
    
}