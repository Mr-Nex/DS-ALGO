public class LinkedList {

	Node head = null;
	
	public static void main(String[] args) {
		
		LinkedList list = new LinkedList();
		
		list.push(list, 10);
		list.push(list, 20);
		list.push(list, 30);
		list.push(list, 40);
		list.push(list, 50);
		list.display(list);
		list.pop(list);
		list.unshift(list, 50);
		list.shift(list);
		list.insertAtIndex(list, 50, 0);
		list.removeAtIndex(list, 0);
		list.push(list, 50);
		list.reverse(list);
		list.display(list);
		
	}
	
	class Node{
		int data;
		Node next;
		
		Node(int d){
			data = d;
			next = null;
		}
	}
	
	void push(LinkedList list, int data) {
		Node newNode = new Node(data);
		if(list.head == null) {
			list.head = newNode;
		}else {
			Node tail = list.head;
			while(tail.next != null) {
				tail = tail.next;
			}
			tail.next = newNode;
			tail = newNode;
		}
	}
	
	void pop(LinkedList list) {
		Node current = list.head;
		Node prev = null;
		if(current == null) {
			System.out.println("Empty List !!!");
		}else if(current.next == null) {
			list.head = null;
		}else {
			Node tail = list.head;
			while(tail.next != null) {
				prev = tail;
				tail = tail.next;
			}
			prev.next = null;
			tail = prev;
		}
	}
	
	void unshift(LinkedList list, int data) {
		Node newNode = new Node(data);
		if(list.head == null) {
			list.head = newNode;
		}else {
			newNode.next = list.head;
			list.head = newNode;
		}
	}
	
	void shift(LinkedList list) {
		Node current = list.head;
		if(current == null) {
			System.out.println("Empty List !!!");
		}else {
			list.head = current.next;
			current.next = null;
		}
	}
	
	void insertAtIndex(LinkedList list, int data, int index) {
		Node current = list.head;
		Node newNode = new Node(data);
		Node prev = null;
		int i=0;
		if(current != null && i == index) {
			newNode.next = current;
			list.head = newNode;
			return;
		}
		while(current != null && i != index) {
			i++;
			prev = current;
			current = current.next;
		}
		if(current != null) {
			newNode.next = prev.next;
			prev.next = newNode;			
		}else {
			System.out.println("Invalid Index !!!");
		}
	}
	
	void removeAtIndex(LinkedList list, int index) {
		Node current = list.head;
		Node prev = null;
		int i=0;
		if(current != null && i == index) {
			list.head = current.next;
			return;
		}
		while(current != null && i != index) {
			i++;
			prev = current;
			current = current.next;
		}
		if(current != null) {
			prev.next = current.next;			
		}else {
			System.out.println("Invalid Index !!!");
		}
	}
	
	void reverse(LinkedList list) {
		Node current = list.head;
		Node prev = null;
		Node next = null;
		
		while(current != null) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
		}
		list.head = prev;
	}
	
	void display(LinkedList list) {
		Node current = list.head;
		
		if(current == null) {
			System.out.println("Empty List !!!");
			return;
		}
		while(current != null) {
			System.out.print(current.data+" ");
			current = current.next;
		}
		System.out.println();
	}
	
}
