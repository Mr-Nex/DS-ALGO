>>Queue Using Array      -



public class Queue{	

	int front, rear, size;
	int capacity;
	int[] arr;
	
    public Queue(int capacity) {
    	this.capacity = capacity;
    	front = this.size = 0;
    	rear = capacity - 1;
    	arr = new int[this.capacity];
    }
    
    boolean isEmpty(Queue queue) {
    	return (queue.size == 0);
    }
    
    boolean isFull(Queue queue) {
    	return (queue.size == queue.capacity);
    }
    
    void enqueue(int data) {
    	if(isFull(this)) {
    		return;
    	}
    	this.rear = (this.rear + 1)%this.capacity;
    	this.arr[this.rear] = data;
    	this.size++;
    }
    
    int dequeue() {
    	if(isEmpty(this)) {
    		return Integer.MIN_VALUE;
    	}
    	int x = this.arr[this.front];
    	this.front = (this.front+1) % this.capacity;
    	this.size--;
    	return x;
    }
    
    int front() 
    { 
        if (isEmpty(this)) 
            return Integer.MIN_VALUE; 
  
        return this.arr[this.front]; 
    } 
    int rear () 
    { 
        if (isEmpty(this)) 
            return Integer.MIN_VALUE; 
  
        return this.arr[this.rear]; 
    } 
    
    public static void main(String[] args) {
    	Queue s = new Queue(100);
    	
    	s.enqueue(10);
    	s.enqueue(20);
    	s.enqueue(30);
    	
    	System.out.println(s.dequeue()+" "+s.front+" "+s.rear+" "+s.capacity+" "+s.size);		
    }
    
}




-----------------------------------------------------------------------------------------------------------------------------------------------------------


>> Using Linked List     -




public class Solve{	

	qNode front, rear;
	
	Solve(){
		front = rear = null;
	}
	
	class qNode{
		int data;
		qNode next;
		qNode(int d){
			data = d;
			this.next = null;
		}
	}
	
	void enqueue(int data) {
		qNode q = new qNode(data);
		
		if(this.rear==null) {
			this.front = this.rear = q;
			return;
		}
		this.rear.next = q;
		this.rear = q;
	}
	
	void dequeue() {		
		if(this.front==null) {
			System.out.println("Empty!!!");
			return;
		}
		this.front = this.front.next;
		if(this.front == null) {
			this.rear = null;
		}
	}
    
    public static void main(String[] args) {
    	Solve q = new Solve(); 
        q.enqueue(10); 
        q.enqueue(20); 
        q.dequeue(); 
        q.dequeue(); 
        q.enqueue(60); 
        q.enqueue(10); 
        q.enqueue(20); 
        q.dequeue(); 
        System.out.println("Queue Front : " + q.front.data); 
        System.out.println("Queue Rear : " + q.rear.data); 
    }
    
}